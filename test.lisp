(setq profundidad 4)

(defun acciones-disp (estado)
	(setq acciones-disponibles NIL)
	(setq tablero (third estado))
	(setq tablero-aux (copy-seq tablero))
	(setq i 1)
	(loop
		(when (> i 6) (return acciones-disponibles))
		(if (not (= (car tablero-aux) 0)) (push (genera-nodo i tablero) acciones-disponibles))
		(setq i (+ i 1))
		(setq tablero-aux (cdr tablero-aux))
	)
	(return-from acciones-disp acciones-disponibles)
)

(defun genera-nodo (indice estado)
	(setq cant-piedras (car (nthcdr (- indice 1) estado)))
	(setq cant-piedras-aux cant-piedras)
	(setq aux (copy-seq estado))
	(setq iterador (+ 1 indice))
	(rplaca (nthcdr (- indice 1) aux) 0)
	(setq lugar 2)
	(loop
		(when (= cant-piedras 0) (return aux))
		(cond
			((not (= (mod lugar (- 15 indice)) 0)) (rplaca (nthcdr (- iterador 1) aux) (+ 1 (car (nthcdr (- iterador 1) aux)))) (setq cant-piedras (- cant-piedras 1)))
		)
		(setq iterador (+ 1 iterador))
		(if (> iterador 14) (setq iterador 1))
		(setq lugar (+ lugar 1))
	)
	(cond
		((< cant-piedras-aux 14)
			(setq bolas (+ indice cant-piedras-aux))
			(if (<= 14 bolas) (setq bolas (- bolas 13)))
			(cond
				((and (<= bolas 6) (= (car (nthcdr (- bolas 1) estado)) 0))
					(rplaca (nthcdr 6 aux) (+ (car (nthcdr 6 aux)) (car (nthcdr (- 14 bolas 1) estado)) 1))
					(rplaca (nthcdr (- 13 bolas) aux) 0)
					(rplaca (nthcdr (- bolas 1) aux) 0)
				)
			)
		)
	)
	(return-from genera-nodo aux)
)

(defun verifica-corte (tablero prof)
	(cond
		((> prof profundidad) (setq res T))
		((or (> (seventh tablero) 24) (> (car (last tablero)) 24)) (setq res T))
		((= (apply #'+ (nthcdr 8 (reverse tablero))) 0) (setq res T))
		((= (- (apply #'+ (nthcdr 7 tablero)) (car (last tablero))) 0) (setq res T))
		(t (setq res NIL))
	)
	(return-from verifica-corte res)
)

(defun resultado (accion nivel)
	(setq res (list (+ 1 nivel) 0 accion))
	(return-from resultado res)
)

(defun gira-estado (nodo)
	(setq tablero (third nodo))
	(return-from gira-estado (append (list (first nodo) (second nodo) (append (nthcdr 7 tablero) (reverse (nthcdr 7 (reverse tablero)))))))
)

(defun gira-tablero (tablero)
	(return-from gira-tablero (append (nthcdr 7 tablero) (reverse (nthcdr 7 (reverse tablero)))))
)

(setq d '(F))

(defun utilidad (nodo)
	(setq tablero (third nodo))
	(cond
		((eql (car d) 'F)
			(setq respuesta (- (seventh tablero) (car (reverse tablero)))) ;utilidad cuando facil
		)
		((eql (car d) 'M)
		  (setq respuesta (- (seventh tablero) (car (reverse tablero))))
		)
		((eql (car d) 'D)
      (setq respuesta (+ (- (seventh tablero) (car (reverse tablero))) (turno-extra nodo)))
		)
		((> (seventh tablero) 24) (setq respuesta (+ respuesta 100)))
		((> (car (last tablero)) 24) (setq respuesta (+ respuesta 100)))
	)
	(return-from utilidad respuesta)
)

(defun turno-extra (estado)
	(setq i 0)
	(setq resp 0)
	(loop
		(when (> i 5) (return resp))
		(if (= (mod (- 7 i) 13) (mod (nth i estado) 13)) (setq resp (+ resp 1)))
		(setq i (+ i 1))
	)
	(return-from turno-extra resp)
)

(print (utilidad '(2 0 (4 4 4 4 4 0 1 0 6 6 5 5 5 0))))
;(print (utilidad '(1 0 (4 4 4 4 4 0 4 5 5 5 4 4 4 5))))
;(print '(5 5 0 5 5 5 1 5 4 4 4 4 0 1))
;(print (gira-tablero '(5 5 0 5 5 5 1 5 4 4 4 4 0 1)))
;(setq nodo '(4 0 (6 6 5 4 0 1 2 6 6 5 4 0 1 2)))
;(print (verifica-corte '(6 6 5 4 0 1 2 6 6 5 4 0 1 2) 4))
;(print (verifica-corte (third nodo) (first nodo)))
;(print (acciones-disp '(0 0 (4 4 4 4 4 4 0 4 4 4 4 4 4 0))))
;(print (resultado '(4 4 4 4 4 0 1 5 5 5 4 4 4 0) (car '(0 0 (4 4 4 4 4 4 0 4 4 4 4 4 4 0)))))
;(print (gira-estado '(2 0 (4 4 4 4 4 0 1 5 5 5 4 4 4 0))))
;(print (acciones-disp (gira-estado '(2 0 (4 4 4 4 4 0 1 5 5 5 4 4 4 0)))))
;(genera-nodo 5 '(2 0 4 0 11 0 9 1 0 0 5 2 10 4))
;(acciones-disp '(1 2 1 10 (4 4 4 4 4 4 0 4 4 4 4 4 4 0)))
;(print (acciones-disp '(1 2 1 10 (4 6 0 3 2 3 6 8 2 2 1 1 0 0))))
;(setq lista NIL)
;(print (genera-nodo 1 '(4 4 4 4 4 4 0 4 4 4 4 4 4 0)))
;(print acciones-disponibles)
; (print (genera-nodo 6 '(4 4 4 4 4 4 0 4 4 4 4 4 4 0)))
; (print (genera-nodo 6 '(0 2 3 8 1 9 5 8 1 1 0 2 3 5)))
; (print (genera-nodo 2 '(4 4 4 4 4 4 0 4 4 4 4 4 4 0)))
; (print (genera-nodo 6 '(4 4 4 4 4 4 0 4 4 4 4 4 4 0)))
; (print (genera-nodo 6 '(0 2 3 8 1 9 5 8 1 1 0 2 3 5)))
; (print (genera-nodo 2 '(4 4 4 4 4 4 0 4 4 4 4 4 4 0)))
; (print (genera-nodo 6 '(4 4 4 4 4 4 0 4 4 4 4 4 4 0)))
; (print (genera-nodo 6 '(0 2 3 8 1 9 5 8 1 1 0 2 3 5)))
